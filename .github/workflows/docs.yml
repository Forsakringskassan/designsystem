name: Deploy
concurrency: deploy-${{ github.ref }}

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

jobs:
    docs:
        name: Deploy
        runs-on: ubuntu-latest
        if: github.ref_protected == true
        env:
            DST_REMOTE: origin
            DST_BRANCH: gh-pages
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Configure git
              run: |
                  git config --global user.email "${{ vars.DOCS_DEPLOY_EMAIL }}"
                  git config --global user.name "${{ vars.DOCS_DEPLOY_NAME }}"
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
            - name: Determine version
              run: echo "VERSION=v$(npm pkg get version | jq -r)" | tee -a $GITHUB_ENV
            - name: Install dependencies
              run: npm ci
            - name: Build (minimal)
              run: npm exec lerna -- run --include-dependencies --scope=@fkui/vue --scope=@fkui/vue-labs build
            - name: Build documentation
              run: npm run build:docs
            - name: Sanity check
              run: git status && git diff
            - name: Pull pages as subtree
              run: git subtree add --prefix pages ${DST_REMOTE} ${DST_BRANCH}
            - name: Prune latest
              run: |
                  if [[ -e pages/latest ]]; then
                      git rm -rf pages/latest
                  fi
            - name: Prune tagged release
              run: |
                  if [[ -e pages/${VERSION} ]]; then
                      git rm -rf pages/${VERSION}
                  fi
            - name: Create tagged release
              run: |
                  rsync -a public/ pages/${VERSION}
                  git add -f pages/${VERSION}
            - name: Create version metadata
              run: |
                  ls -d pages/v*.*.* | sed "s#pages/##g" | jq -Rn '{ "versions": [inputs] }' | tee pages/versions.json
                  git add -f pages/versions.json
            - name: Symlink latest to tagged release
              run: |
                  ln -s ${VERSION} pages/latest
                  git add -f pages/latest
            - name: Commit changes
              run: |
                  git commit \
                      --message "chore(release): [skip ci] deploy ${VERSION} documentation" \
                      --no-verify \
                      --allow-empty
            - name: Push subtree
              run: git subtree push --prefix pages ${DST_REMOTE} ${DST_BRANCH}
